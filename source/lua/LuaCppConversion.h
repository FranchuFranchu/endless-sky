// Copyright (C) 2021 by FranchuFranchu <fff999abc999@gmail.com>
// Permission to use, copy, modify, and/or distribute this software for any purpose with or without fee is hereby granted.
// THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

// Included by LuaUtil.cpp

void LuaUtil::ObjectToLua(const void *pointer, vector<size_t> type)
{
	size_t basicType = type.front();
	
	#include "autogenerated/ObjectToLuaFragment.h"
	else if (basicType == typeid(string).hash_code())
		lua_pushstring(L, (*reinterpret_cast<const string*>(pointer)).c_str());
	// Check if it's a ClassDefinition
	else if(LuaUtil::definitions.find(basicType) != LuaUtil::definitions.end())
		LuaUtil::PushInstance(LuaUtil::definitions[basicType].registryName, pointer);
	else
	{
		asm("int $3");
		lua_pushstring(L, "No matching type!");
		lua_error(L);
	}
}


// Pops a Lua object from the stack and sets the value at *pointer
void LuaUtil::LuaToObject(void *pointer, vector<size_t> type)
{
	size_t basicType = type.front();
	if (lua_isnumber(L, -1))
	{
		#include "autogenerated/LuaToObjectFragment.h"
		else 
		{
			lua_pushstring(L, "Attribute is not a numeric type!");
			lua_error(L);
		}
		lua_pop(L, 1);
		return;
	}
	else if (lua_isstring(L, -1))
	{
		if (basicType == typeid(string).hash_code())
		{
			*reinterpret_cast<string*>(pointer) = string(lua_tostring(L, -1));
		}
		else 
		{
			lua_pushstring(L, "Attribute is not a string type!");
			lua_error(L);
		}
		lua_pop(L, 1);
		return;
	}
	else
	{
		lua_pushstring(L, ("Objects of type " + string(luaL_typename(L, -1)) + " can't be converted to C++ objects yet").c_str());
		lua_error(L);
	}
}
